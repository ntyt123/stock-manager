# 使用 python:3.8-slim-bullseye 作为基础镜像，减少镜像体积
# 选择3.8版本以满足akshare 0.6.10+对Python 3.7+的要求，同时保持与项目历史依赖兼容性
USER root
# 使用DaoCloud镜像加速拉取（参考docker-compose/README.md中的镜像仓库配置）
FROM docker.m.daocloud.io/library/python:3.8-slim-bullseye

# 配置阿里云Debian镜像源，优化国内下载速度
RUN echo "deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib" > /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list && \
    # 配置pip国内镜像，加速Python库安装
    echo "[global]\n\
trusted-host=mirrors.aliyun.com\n\
index-url=http://mirrors.aliyun.com/pypi/simple" > /etc/pip.conf && \
    # 设置时区为上海，确保日志时间一致性
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone

# 配置UTF-8语言环境，避免中文乱码
ENV LANG=zh_CN.UTF-8
ENV LC_CTYPE=zh_CN.UTF-8
ENV LC_ALL=C
ENV PYTHONPATH=/data/stock  # 项目Python路径配置

# 配置vim编码，方便容器内文件编辑
RUN mkdir -p /etc/vim/ && \
    echo "set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936" >> /etc/vim/vimrc && \
    echo "set termencoding=utf-8" >> /etc/vim/vimrc && \
    echo "set encoding=utf-8" >> /etc/vim/vimrc

# 安装必要依赖：
# 1. 系统工具：git/cron用于代码拉取和定时任务
# 2. 编译依赖：gcc等用于安装mysqlclient等需要编译的库（安装后清理）
# 3. 移除nodejs（前端通过独立容器构建，参考docker-compose.yml的frontend-build）
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    cron \
    pkg-config \
    net-tools \
    procps \
    gcc \
    make \
    python3-dev \
    default-libmysqlclient-dev \
    libxml2-dev && \
    # 安装Python核心库，指定版本以保持兼容性（参考更新日志中的版本记录）
    pip3 install --no-cache-dir \
    mysqlclient \
    sqlalchemy \
    supervisor \
    numpy==1.21.6 \
    pandas==1.3.5 \
    akshare==1.10.5 \
    tornado \
    torndb \
    bokeh==2.4.3 \
    stockstats \
    scikit-learn && \
    # 清理编译依赖和缓存，大幅减小镜像体积
    apt-get --purge remove -y \
    gcc \
    make \
    python3-dev \
    default-libmysqlclient-dev \
    libxml2-dev && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /root/.cache/pip/* && \
    # 移除pyc文件进一步减小体积
    find /usr/local/lib/python3.8/site-packages -name "*.pyc" -delete

# 补丁修复：
# 1. sqlalchemy：添加INSERT IGNORE支持，解决数据插入重复问题
# 2. torndb：适配Python3语法（izip→zip，类型转换兼容）
RUN sed -i -e 's/executemany(statement/executemany(statement.replace("INSERT INTO","INSERT IGNORE INTO")/g' \
    /usr/local/lib/python3.8/site-packages/sqlalchemy/dialects/mysql/mysqldb.py && \
    sed -i -e 's/itertools\.izip/zip/g' \
    /usr/local/lib/python3.8/site-packages/torndb.py && \
    sed -i -e 's/\+ CONVERSIONS\[field_type\]/+ [CONVERSIONS[field_type], bytes]/g' \
    /usr/local/lib/python3.8/site-packages/torndb.py && \
    # 清理不必要的系统定时任务
    rm -f /etc/cron.daily/apt-compat /etc/cron.daily/dpkg /etc/cron.daily/passwd

# 配置定时任务：
# 分钟级/小时级/日级（16:30）/月级（1/10/20日17:30）任务调度（与run_cron.sh权限配置匹配）
RUN mkdir -p /etc/cron.minutely /etc/cron.hourly /etc/cron.daily /etc/cron.monthly /var/spool/cron/crontabs && \
    echo "SHELL=/bin/sh \n\
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin \n\
*/1 * * * * /bin/run-parts /etc/cron.minutely \n\
10 * * * * /bin/run-parts /etc/cron.hourly \n\
30 16 * * * /bin/run-parts /etc/cron.daily \n\
30 17 1,10,20 * * /bin/run-parts /etc/cron.monthly" > /var/spool/cron/crontabs/root && \
    chmod 600 /var/spool/cron/crontabs/root

# 暴露应用端口（与docker-compose中backend服务端口映射一致）
EXPOSE 8888 9999

# 启动入口：使用supervisor管理进程（与项目架构中的进程管理设计匹配）
ENTRYPOINT ["supervisord", "-n", "-c", "/data/supervisor/supervisord.conf"]