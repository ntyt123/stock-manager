# 使用指定的基础镜像（兼容项目要求的Python 3.11）
FROM python:3.11-slim-bullseye

# 确保以root用户执行后续操作
USER root

# 配置阿里云Debian源（移除bullseye-backports，避免Release文件错误）
RUN echo "deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib" > /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list && \
    # 配置pip国内镜像（加速Python库安装）
    echo "[global]\n\
trusted-host=mirrors.aliyun.com\n\
index-url=http://mirrors.aliyun.com/pypi/simple" > /etc/pip.conf && \
    # 设置时区为上海
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone

# 配置语言环境
ENV LANG=zh_CN.UTF-8
ENV LC_CTYPE=zh_CN.UTF-8
ENV LC_ALL=C
ENV PYTHONPATH=/data/stock

# 配置vim编码（方便容器内编辑）
RUN mkdir -p /etc/vim/ && \
    echo "set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936" >> /etc/vim/vimrc && \
    echo "set termencoding=utf-8" >> /etc/vim/vimrc && \
    echo "set encoding=utf-8" >> /etc/vim/vimrc

# 第一步：安装系统依赖（拆分步骤，便于排查）
RUN apt-get update && apt-get install -y \
    git \
    pkg-config \
    net-tools \
    procps \
    gcc \
    make \
    python3-dev \
    default-libmysqlclient-dev \
    libxml2-dev \
    cron \
    && apt-get clean

# 第二步：安装Node.js（使用NodeSource源，避免apt源版本问题）
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean

# 第三步：安装Python基础库（拆分步骤，减少失败影响范围）
RUN pip3 install mysqlclient sqlalchemy && \
    pip3 install supervisor && \
    pip3 install numpy pandas && \
    pip3 install akshare --upgrade && \
    pip3 install tornado torndb && \
    pip3 install bokeh stockstats scikit-learn

# 第四步：清理系统依赖和缓存（减小镜像体积）
RUN apt-get --purge remove -y \
    gcc \
    make \
    python3-dev \
    default-libmysqlclient-dev \
    libxml2-dev && \
    rm -rf /root/.cache/* && \
    apt-get clean && \
    apt-get autoremove -y && \
    # 清理pyc文件
    cd /usr/local/lib/python3.11/site-packages && \
    find ./ -name *.pyc | xargs rm -f

# 修复Python库兼容性问题
RUN echo `date +%Y-%m-%d:%H:%M:%S` >> /etc/docker.build && \
    # 修复sqlalchemy插入冲突问题
    sed -i -e 's/executemany(statement/executemany(statement.replace\("INSERT INTO","INSERT IGNORE INTO")/g' \
        /usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/mysql/mysqldb.py && \
    # 清理不必要的cron任务
    rm -f /etc/cron.daily/apt-compat /etc/cron.daily/dpkg /etc/cron.daily/passwd && \
    # 修复torndb在Python3下的兼容性
    sed -i -e 's/itertools\.izip/zip/g' \
    /usr/local/lib/python3.11/site-packages/torndb.py && \
    sed -i -e 's/\+ CONVERSIONS\[field_type\]/\+ \[CONVERSIONS\[field_type\],bytes\]/g' \
    /usr/local/lib/python3.11/site-packages/torndb.py

# 配置cron服务
RUN mkdir -p /etc/cron.minutely /etc/cron.hourly /etc/cron.monthly /var/spool/cron/crontabs && \
    echo "SHELL=/bin/sh \n\
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin \n\
# min   hour    day     month   weekday command \n\
*/1     *       *       *       *       /bin/run-parts /etc/cron.minutely \n\
10      *       *       *       *       /bin/run-parts /etc/cron.hourly \n\
30      16      *       *       *       /bin/run-parts /etc/cron.daily \n\
30      17      1,10,20 *       *       /bin/run-parts /etc/cron.monthly \n" > /var/spool/cron/crontabs/root && \
    chmod 600 /var/spool/cron/crontabs/root

# 暴露服务端口
EXPOSE 8888 9090

# 启动命令
ENTRYPOINT ["supervisord","-n","-c","/data/supervisor/supervisord.conf"]