        // 页面加载时检查登录状态
        document.addEventListener('DOMContentLoaded', async function() {
            await checkAuth();
            updateTime();
            setInterval(updateTime, 1000);
            
            // 模拟实时数据更新
            updateStockData();
            setInterval(updateStockData, 5000);
            
            // 初始化Excel上传功能
            initExcelUpload();
            
            // 初始化页签功能
            initTabs();
            
            // 页面加载完成后，延迟加载用户持仓数据
            setTimeout(() => {
                loadUserPositions();
            }, 500);
        });
        
        // 打开Excel上传模态框
        function openExcelUploadModal() {
            const modal = document.getElementById('excelUploadModal');
            modal.style.display = 'block';
            
            // 清空上传状态
            clearUploadStatus();
            
            // 重新绑定拖拽事件（确保模态框显示后事件绑定正确）
            initExcelUpload();
        }
        
        // 关闭Excel上传模态框
        function closeExcelUploadModal() {
            const modal = document.getElementById('excelUploadModal');
            modal.style.display = 'none';
            
            // 清空上传状态
            clearUploadStatus();
        }
        
        // 清空上传状态
        function clearUploadStatus() {
            const uploadStatus = document.getElementById('uploadStatus');
            uploadStatus.textContent = '';
            uploadStatus.className = 'upload-status';
            
            // 清空文件输入
            const fileInput = document.getElementById('excelFileInput');
            fileInput.value = '';
        }

        // 初始化Excel上传功能
        function initExcelUpload() {
            const uploadArea = document.getElementById('excelUploadArea');
            const fileInput = document.getElementById('excelFileInput');
            
            if (!uploadArea || !fileInput) return;
            
            // 拖拽事件处理
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            
            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
            });
            
            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleExcelFile(files[0]);
                }
            });
            
            // 文件选择事件
            fileInput.addEventListener('change', function(e) {
                if (e.target.files.length > 0) {
                    handleExcelFile(e.target.files[0]);
                }
            });
        }

        // 处理Excel文件上传
        async function handleExcelFile(file) {
            if (!file) return;
            
            // 检查文件类型
            const validTypes = ['.xls', '.xlsx'];
            const fileExtension = file.name.toLowerCase().slice(file.name.lastIndexOf('.'));
            
            if (!validTypes.includes(fileExtension)) {
                showUploadStatus('请上传.xls或.xlsx格式的Excel文件', 'error');
                return;
            }
            
            const token = localStorage.getItem('token');
            if (!token) {
                showUploadStatus('请先登录系统', 'error');
                return;
            }
            
            try {
                showUploadStatus('正在上传文件...', 'info');
                
                const formData = new FormData();
                formData.append('file', file);
                
                const response = await fetch('/api/upload/positions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showUploadStatus('文件上传成功！正在解析持仓数据...', 'success');
                    
                    // 延迟后显示持仓数据
                    setTimeout(() => {
                        displayUploadedPositions(data.data.positions, data.data.summary);
                        showUploadStatus('数据解析完成！', 'success');
                        
                        // 上传成功后关闭模态框
                        setTimeout(() => {
                            closeExcelUploadModal();
                        }, 500);
                    }, 1000);
                    
                } else {
                    showUploadStatus(data.error || '文件上传失败', 'error');
                }
                
            } catch (error) {
                console.error('Excel文件上传错误:', error);
                showUploadStatus('网络连接失败，请检查网络后重试', 'error');
            }
        }

        // 显示上传状态
        function showUploadStatus(message, type) {
            const statusDiv = document.getElementById('uploadStatus');
            if (!statusDiv) return;
            
            statusDiv.textContent = message;
            statusDiv.className = `upload-status ${type}`;
            statusDiv.style.display = 'block';
        }

        // 清空上传的数据
        async function clearUploadedData() {
            const token = localStorage.getItem('token');
            
            if (!token) {
                // 未登录状态，只清空本地显示
                document.getElementById('uploadedTotalValue').textContent = '¥0.00';
                document.getElementById('uploadedProfitLoss').textContent = '总盈亏: ¥0.00 (0.00%)';
                document.getElementById('uploadedPositions').innerHTML = 
                    '<div class="loading-text">请上传Excel文件查看持仓数据</div>';
                
                const statusDiv = document.getElementById('uploadStatus');
                if (statusDiv) {
                    statusDiv.style.display = 'none';
                    statusDiv.textContent = '';
                }
                
                const fileInput = document.getElementById('excelFileInput');
                if (fileInput) fileInput.value = '';
                
                // 移除更新时间信息
                const updateInfo = document.getElementById('positionUpdateInfo');
                if (updateInfo) {
                    updateInfo.remove();
                }
                
                return;
            }
            
            // 确认清空操作
            if (!confirm('确定要清空所有持仓数据吗？此操作不可恢复。')) {
                return;
            }
            
            try {
                const response = await fetch('/api/positions', {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // 清空本地显示
                        document.getElementById('uploadedTotalValue').textContent = '¥0.00';
                        document.getElementById('uploadedProfitLoss').textContent = '总盈亏: ¥0.00 (0.00%)';
                        document.getElementById('uploadedPositions').innerHTML = 
                            '<div class="loading-text">请上传Excel文件查看持仓数据</div>';
                        
                        const statusDiv = document.getElementById('uploadStatus');
                        if (statusDiv) {
                            statusDiv.style.display = 'none';
                            statusDiv.textContent = '';
                        }
                        
                        const fileInput = document.getElementById('excelFileInput');
                        if (fileInput) fileInput.value = '';
                        
                        // 移除更新时间信息
                        const updateInfo = document.getElementById('positionUpdateInfo');
                        if (updateInfo) {
                            updateInfo.remove();
                        }
                        
                        showNotification('持仓数据已清空', 'success');
                        console.log(`✅ 持仓数据已清空，删除了 ${result.deletedCount} 条记录`);
                    } else {
                        showNotification('清空数据失败：' + (result.error || '未知错误'), 'error');
                    }
                } else {
                    showNotification('清空数据失败，请重试', 'error');
                }
            } catch (error) {
                console.error('清空持仓数据错误:', error);
                showNotification('清空数据失败，网络连接错误', 'error');
            }
        }

        // 检查认证状态
        async function checkAuth() {
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            
            if (token && user) {
                try {
                    const response = await fetch('/api/auth/me', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response.ok) {
                        const userData = await response.json();
                        updateNavbar(userData);
                        return;
                    }
                } catch (error) {
                    console.error('认证检查失败:', error);
                }
            }
            
            // 未登录状态
            updateNavbar(null);
        }

        // 显示上传的持仓数据
        function displayUploadedPositions(positions, summary = null) {
            const container = document.getElementById('uploadedPositions');
            const totalValueEl = document.getElementById('uploadedTotalValue');
            const profitLossEl = document.getElementById('uploadedProfitLoss');
            
            if (!container || !totalValueEl || !profitLossEl) return;
            
            if (!positions || positions.length === 0) {
                container.innerHTML = '<div class="loading-text">未找到持仓数据</div>';
                totalValueEl.textContent = '¥0.00';
                profitLossEl.textContent = '总盈亏: ¥0.00 (0.00%)';
                
                // 移除更新时间信息
                const updateInfo = document.getElementById('positionUpdateInfo');
                if (updateInfo) {
                    updateInfo.remove();
                }
                
                return;
            }
            
            // 如果提供了汇总信息，直接使用，否则重新计算
            let totalMarketValue, totalProfitLoss, totalCost, profitLossRate;
            if (summary) {
                totalMarketValue = summary.totalMarketValue;
                totalProfitLoss = summary.totalProfitLoss;
                totalCost = summary.totalCost || 0;
                profitLossRate = summary.totalProfitLossRate;
                
                // 显示更新时间信息
                if (summary.lastUpdate) {
                    const updateTime = new Date(summary.lastUpdate).toLocaleString('zh-CN');
                    
                    // 创建或更新状态显示元素
                    let statusDiv = document.getElementById('positionUpdateInfo');
                    if (!statusDiv) {
                        statusDiv = document.createElement('div');
                        statusDiv.id = 'positionUpdateInfo';
                        statusDiv.className = 'position-update-info';
                        const positionsContainer = document.getElementById('uploadedPositions');
                        if (positionsContainer) {
                            positionsContainer.parentNode.insertBefore(statusDiv, positionsContainer);
                        }
                    }
                    
                    statusDiv.innerHTML = `
                        <div class="update-info">
                            <span class="update-label">数据更新时间:</span>
                            <span class="update-time">${updateTime}</span>
                        </div>
                    `;
                }
            } else {
                // 计算总市值和总盈亏
                totalMarketValue = 0;
                totalProfitLoss = 0;
                totalCost = 0;
                
                positions.forEach(position => {
                    totalMarketValue += parseFloat(position.marketValue) || 0;
                    totalProfitLoss += parseFloat(position.profitLoss) || 0;
                    totalCost += parseFloat(position.costPrice) || 0;
                });
                
                profitLossRate = totalCost > 0 ? (totalProfitLoss / totalCost * 100).toFixed(2) : '0.00';
                
                // 移除更新时间信息
                const updateInfo = document.getElementById('positionUpdateInfo');
                if (updateInfo) {
                    updateInfo.remove();
                }
            }
            
            // 更新总市值和盈亏显示
            totalValueEl.textContent = `¥${totalMarketValue.toFixed(2)}`;
            profitLossEl.textContent = `总盈亏: ¥${totalProfitLoss.toFixed(2)} (${profitLossRate}%)`;
            
            // 生成持仓列表HTML
            let html = '<div class="positions-list">';
            
            positions.forEach(position => {
                const profitLoss = parseFloat(position.profitLoss) || 0;
                const profitLossRate = parseFloat(position.profitLossRate) || 0;
                const isProfit = profitLoss >= 0;
                const profitIcon = isProfit ? '📈' : '📉';
                
                html += `
                    <div class="position-card">
                        <div class="position-header">
                            <div class="stock-info">
                                <div class="stock-symbol">${position.stockCode}</div>
                                <div class="stock-name">${position.stockName}</div>
                            </div>
                            <div class="profit-indicator ${isProfit ? 'profit' : 'loss'}">
                                ${profitIcon}
                            </div>
                        </div>
                        
                        <div class="position-stats">
                            <div class="stat-row">
                                <div class="stat-item">
                                    <span class="stat-label">持仓数量</span>
                                    <span class="stat-value">${position.quantity}股</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">成本价</span>
                                    <span class="stat-value">¥${parseFloat(position.costPrice).toFixed(2)}</span>
                                </div>
                            </div>
                            
                            <div class="stat-row">
                                <div class="stat-item">
                                    <span class="stat-label">当前价</span>
                                    <span class="stat-value">¥${parseFloat(position.currentPrice).toFixed(2)}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">市值</span>
                                    <span class="stat-value">¥${parseFloat(position.marketValue).toFixed(2)}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="position-summary">
                            <div class="profit-loss ${isProfit ? 'profit' : 'loss'}">
                                <span class="profit-amount">${isProfit ? '+' : ''}¥${profitLoss.toFixed(2)}</span>
                                <span class="profit-rate">${isProfit ? '+' : ''}${profitLossRate.toFixed(2)}%</span>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        // 加载用户持仓数据
        async function loadUserPositions() {
            const token = localStorage.getItem('token');
            if (!token) {
                console.log('用户未登录，跳过加载持仓数据');
                return;
            }
            
            try {
                const response = await fetch('/api/positions', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.data.positions.length > 0) {
                        // 显示持仓数据
                        displayUploadedPositions(result.data.positions, result.data.summary);
                        
                        // 显示更新时间信息
                        if (result.data.summary.lastUpdate) {
                            const updateTime = new Date(result.data.summary.lastUpdate).toLocaleString('zh-CN');
                            
                            // 创建或更新状态显示元素
                            let statusDiv = document.getElementById('positionUpdateInfo');
                            if (!statusDiv) {
                                statusDiv = document.createElement('div');
                                statusDiv.id = 'positionUpdateInfo';
                                statusDiv.className = 'position-update-info';
                                const positionsContainer = document.getElementById('uploadedPositions');
                                if (positionsContainer) {
                                    positionsContainer.parentNode.insertBefore(statusDiv, positionsContainer);
                                }
                            }
                            
                            statusDiv.innerHTML = `
                                <div class="update-info">
                                    <span class="update-label">数据更新时间:</span>
                                    <span class="update-time">${updateTime}</span>
                                </div>
                            `;
                        }
                        
                        console.log('✅ 用户持仓数据加载成功');
                    } else {
                        console.log('用户暂无持仓数据');
                    }
                } else {
                    console.error('获取持仓数据失败:', response.status);
                }
            } catch (error) {
                console.error('加载用户持仓数据错误:', error);
            }
        }

        // 初始化页签功能
        function initTabs() {
            // 为所有页签按钮添加点击事件
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.onclick = function() {
                    switchTab(this.getAttribute('data-tab'));
                };
            });
        }

        // 页签切换功能
        function switchTab(tabName) {
            // 移除所有按钮的active类
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // 移除所有内容的active类
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });

            // 激活选中的按钮
            const btn = document.querySelector(`[data-tab="${tabName}"]`);
            if (btn) btn.classList.add('active');

            // 显示选中的内容
            const content = document.getElementById(tabName + '-tab');
            if (content) {
                content.classList.add('active');

                // 加载页签数据
                loadTabData(tabName);
            }
        }
        
        // 加载页签数据
        function loadTabData(tabName) {
            switch (tabName) {
                case 'overview':
                    // 总览页签已经默认加载
                    break;
                case 'market':
                    loadMarketData();
                    break;
                case 'analysis':
                    loadAnalysisData();
                    break;
            }
        }
        
        // 加载股市信息数据
        function loadMarketData() {
            // 加载自选股列表
            loadWatchlist();
            
            // 加载自选股行情
            loadWatchlistQuotes();
            
            // 加载热点新闻
            loadHotNews();
        }
        
        // 加载分析数据
        function loadAnalysisData() {
            // 检查是否有持仓数据
            const positions = document.querySelectorAll('.position-card');
            if (positions.length === 0) {
                document.getElementById('analysisCharts').innerHTML = 
                    '<div class="loading-text">暂无持仓数据，请先上传Excel文件</div>';
                document.getElementById('analysisStats').innerHTML = 
                    '<div class="loading-text">暂无分析数据</div>';
                document.getElementById('industryDistribution').innerHTML = 
                    '<div class="loading-text">暂无行业分布数据</div>';
                document.getElementById('riskAssessment').innerHTML = 
                    '<div class="loading-text">暂无风险评估数据</div>';
                return;
            }
            
            // 显示分析占位符
            document.getElementById('analysisCharts').innerHTML = 
                '<div class="loading-text">图表分析功能开发中...</div>';
            document.getElementById('analysisStats').innerHTML = 
                '<div class="loading-text">统计数据功能开发中...</div>';
            document.getElementById('industryDistribution').innerHTML = 
                '<div class="loading-text">行业分布分析开发中...</div>';
            document.getElementById('riskAssessment').innerHTML = 
                '<div class="loading-text">风险评估功能开发中...</div>';
        }
        
        // 加载自选股列表
        async function loadWatchlist() {
            const container = document.getElementById('watchlistContainer');
            
            if (!container) return;
            
            try {
                // 显示加载状态
                container.innerHTML = '<div class="loading-text">正在加载自选股...</div>';
                
                const response = await fetch('/api/watchlist', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('获取自选股列表失败');
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || '获取自选股列表失败');
                }
                
                const watchlist = result.data || [];
                
                if (watchlist.length === 0) {
                    container.innerHTML = '<div class="loading-text">暂无自选股，请添加股票代码</div>';
                    return;
                }
                
                let html = '';
                watchlist.forEach(stock => {
                    html += `
                        <div class="watchlist-item">
                            <div class="stock-info">
                                <span class="stock-code">${stock.stock_code}</span>
                                <span class="stock-name">${stock.stock_name || '未知股票'}</span>
                            </div>
                            <button class="remove-btn" onclick="removeFromWatchlist('${stock.stock_code}')">删除</button>
                        </div>
                    `;
                });
                
                container.innerHTML = html;
                
            } catch (error) {
                console.error('加载自选股列表错误:', error);
                container.innerHTML = '<div class="error-text">加载自选股失败，请刷新重试</div>';
            }
        }
        
        // 添加自选股
        async function addToWatchlist() {
            const input = document.getElementById('stockCodeInput');
            const code = input.value.trim();
            
            if (!code) {
                alert('请输入股票代码');
                return;
            }
            
            // 简单的股票代码验证
            if (!/^[0-9]{6}$/.test(code)) {
                alert('请输入正确的6位股票代码');
                return;
            }
            
            try {
                const response = await fetch('/api/watchlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        stockCode: code,
                        stockName: '' // 后续可以通过API获取股票名称
                    })
                });
                
                if (!response.ok) {
                    const errorResult = await response.json();
                    throw new Error(errorResult.error || '添加自选股失败');
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || '添加自选股失败');
                }
                
                // 清空输入框
                input.value = '';
                
                // 刷新自选股列表
                await loadWatchlist();
                
                // 刷新自选股行情
                loadWatchlistQuotes();
                
                alert('添加成功！');
                
            } catch (error) {
                console.error('添加自选股错误:', error);
                alert(error.message || '添加自选股失败');
            }
        }
        
        // 从自选股删除
        async function removeFromWatchlist(code) {
            if (!confirm('确定要删除这只自选股吗？')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/watchlist/${code}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (!response.ok) {
                    const errorResult = await response.json();
                    throw new Error(errorResult.error || '删除自选股失败');
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || '删除自选股失败');
                }
                
                // 刷新自选股列表
                await loadWatchlist();
                
                // 刷新自选股行情
                loadWatchlistQuotes();
                
                alert('删除成功！');
                
            } catch (error) {
                console.error('删除自选股错误:', error);
                alert(error.message || '删除自选股失败');
            }
        }
        
        // 加载自选股行情
        async function loadWatchlistQuotes() {
            const container = document.getElementById('watchlistQuotes');
            
            if (!container) return;
            
            try {
                // 显示加载状态
                container.innerHTML = '<div class="loading-text">正在获取行情数据...</div>';
                
                // 获取自选股列表
                const response = await fetch('/api/watchlist', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('获取自选股列表失败');
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.error || '获取自选股列表失败');
                }
                
                const watchlist = result.data || [];
                
                if (watchlist.length === 0) {
                    container.innerHTML = '<div class="loading-text">暂无自选股行情数据</div>';
                    return;
                }
                
                // 模拟行情数据（实际应用中应该调用API）
                setTimeout(() => {
                    let html = '';
                    watchlist.forEach(stock => {
                        // 模拟价格和涨跌幅
                        const basePrice = Math.random() * 100 + 10;
                        const changePercent = (Math.random() - 0.5) * 10;
                        const change = basePrice * changePercent / 100;
                        const currentPrice = basePrice + change;
                        
                        const isPositive = changePercent >= 0;
                        
                        html += `
                            <div class="quote-item">
                                <div class="quote-info">
                                    <span class="quote-symbol">${stock.stock_code}</span>
                                </div>
                                <div class="quote-price">¥${currentPrice.toFixed(2)}</div>
                                <div class="quote-change ${isPositive ? 'positive' : 'negative'}">
                                    ${isPositive ? '+' : ''}${changePercent.toFixed(2)}%
                                </div>
                            </div>
                        `;
                    });
                    
                    container.innerHTML = html;
                }, 1000);
                
            } catch (error) {
                console.error('加载自选股行情错误:', error);
                container.innerHTML = '<div class="error-text">获取行情数据失败</div>';
            }
        }
        
        // 加载热点新闻
        function loadHotNews() {
            const container = document.getElementById('newsContainer');
            
            if (!container) return;
            
            // 显示加载状态
            container.innerHTML = '<div class="loading-text">正在加载热点新闻...</div>';
            
            // 模拟新闻数据（实际应用中应该调用API）
            setTimeout(() => {
                const news = [
                    {
                        title: 'A股市场迎来开门红，三大指数集体上涨',
                        source: '新浪财经',
                        time: '2小时前'
                    },
                    {
                        title: '科技股领涨，创业板指涨幅超过2%',
                        source: '腾讯财经',
                        time: '3小时前'
                    },
                    {
                        title: '央行发布最新货币政策报告，强调稳健中性',
                        source: '财经网',
                        time: '5小时前'
                    },
                    {
                        title: '外资持续流入A股市场，北向资金净买入超50亿',
                        source: '东方财富',
                        time: '6小时前'
                    },
                    {
                        title: '新能源汽车板块表现强势，多家公司涨停',
                        source: '证券时报',
                        time: '8小时前'
                    }
                ];
                
                let html = '';
                news.forEach(item => {
                    html += `
                        <div class="news-item">
                            <div class="news-title">${item.title}</div>
                            <div class="news-meta">
                                <span class="news-source">${item.source}</span>
                                <span class="news-time">${item.time}</span>
                            </div>
                        </div>
                    `;
                });
                
                container.innerHTML = html;
            }, 1500);
        }

        // 显示光大证券持仓数据
        function displayEBSCNPositions(data) {
            const { positions, summary } = data;
            
            // 更新总资产和总盈亏
            document.getElementById('ebscnTotalValue').textContent = 
                `¥${summary.totalMarketValue.toLocaleString('zh-CN', {minimumFractionDigits: 2})}`;
            
            const profitClass = summary.totalProfitLoss >= 0 ? 'positive' : 'negative';
            document.getElementById('ebscnProfitLoss').innerHTML = 
                `总盈亏: <span class="${profitClass}">¥${summary.totalProfitLoss.toLocaleString('zh-CN', {minimumFractionDigits: 2})} (${summary.totalProfitLossRate}%)</span>`;
            
            // 显示持仓列表
            const positionsContainer = document.getElementById('ebscnPositions');
            if (positions.length === 0) {
                positionsContainer.innerHTML = '<div class="loading-text">暂无持仓数据</div>';
                return;
            }

            positionsContainer.innerHTML = positions.map(position => {
                const profitLoss = parseFloat(position.profitLoss) || 0;
                const profitLossRate = parseFloat(position.profitLossRate) || 0;
                const isProfit = profitLoss >= 0;
                const profitIcon = isProfit ? '📈' : '📉';
                
                return `
                    <div class="position-card">
                        <div class="position-header">
                            <div class="stock-info">
                                <div class="stock-symbol">${position.stockCode}</div>
                                <div class="stock-name">${position.stockName}</div>
                            </div>
                            <div class="profit-indicator ${isProfit ? 'profit' : 'loss'}">
                                ${profitIcon}
                            </div>
                        </div>
                        
                        <div class="position-stats">
                            <div class="stat-row">
                                <div class="stat-item">
                                    <span class="stat-label">持仓数量</span>
                                    <span class="stat-value">${position.quantity}股</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">成本价</span>
                                    <span class="stat-value">¥${parseFloat(position.costPrice).toFixed(2)}</span>
                                </div>
                            </div>
                            
                            <div class="stat-row">
                                <div class="stat-item">
                                    <span class="stat-label">当前价</span>
                                    <span class="stat-value">¥${parseFloat(position.currentPrice).toFixed(2)}</span>
                                </div>
                                <div class="stat-item">
                                    <span class="stat-label">市值</span>
                                    <span class="stat-value">¥${parseFloat(position.marketValue).toFixed(2)}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="position-summary">
                            <div class="profit-loss ${isProfit ? 'profit' : 'loss'}">
                                <span class="profit-amount">${isProfit ? '+' : ''}¥${profitLoss.toFixed(2)}</span>
                                <span class="profit-rate">${isProfit ? '+' : ''}${profitLossRate.toFixed(2)}%</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // 更新导航栏状态
        function updateNavbar(user) {
            const loginBtn = document.getElementById('loginBtn');
            const logoutBtn = document.getElementById('logoutBtn');
            const adminBtn = document.getElementById('adminBtn');
            const userName = document.getElementById('userName');
            const userBadge = document.getElementById('userBadge');

            if (user) {
                // 已登录状态
                userName.textContent = user.username;
                
                // 设置用户等级标识
                let badgeText = '';
                let badgeClass = '';
                
                switch(user.role) {
                    case 'super_admin':
                        badgeText = '超级管理员';
                        badgeClass = 'badge-super-admin';
                        break;
                    case 'admin':
                        badgeText = '管理员';
                        badgeClass = 'badge-admin';
                        break;
                    default:
                        badgeText = '用户';
                        badgeClass = 'badge-user';
                }
                
                userBadge.textContent = badgeText;
                userBadge.className = `user-badge ${badgeClass}`;
                
                loginBtn.style.display = 'none';
                logoutBtn.style.display = 'inline-block';
                
                // 如果是管理员，显示管理按钮
                if (user.role === 'admin' || user.role === 'super_admin') {
                    adminBtn.style.display = 'inline-block';
                } else {
                    adminBtn.style.display = 'none';
                }
            } else {
                // 未登录状态
                userName.textContent = '游客';
                userBadge.textContent = '游客';
                userBadge.className = 'user-badge badge-user';
                loginBtn.style.display = 'inline-block';
                logoutBtn.style.display = 'none';
                adminBtn.style.display = 'none';
                
                // 清除本地存储
                localStorage.removeItem('token');
                localStorage.removeItem('user');
            }
        }

        // 跳转到登录页面
        function goToLogin() {
            window.location.href = '/login.html';
        }

        // 跳转到管理页面
        function goToAdmin() {
            window.location.href = '/admin.html';
        }

        // 退出登录
        function logout() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            updateNavbar(null);
            
            // 显示退出成功消息
            showNotification('已成功退出登录', 'success');
        }

        // 显示通知
        function showNotification(message, type = 'info') {
            // 创建通知元素
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            // 添加到页面
            document.body.appendChild(notification);
            
            // 3秒后自动移除
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // 更新当前时间
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('zh-CN');
            const dateString = now.toLocaleDateString('zh-CN');
            
            document.getElementById('currentTime').textContent = timeString;
            
            // 每5分钟更新一次最后更新时间
            if (now.getMinutes() % 5 === 0 && now.getSeconds() === 0) {
                document.getElementById('lastUpdate').textContent = `${dateString} ${timeString}`;
            }
        }

        // 模拟股票数据更新
        function updateStockData() {
            const stocks = ['AAPL', 'GOOGL', 'MSFT', 'TSLA', 'AMZN'];
            
            stocks.forEach(stock => {
                const priceElement = document.querySelector(`[data-stock="${stock}"] .stock-price`);
                const changeElement = document.querySelector(`[data-stock="${stock}"] .stock-change`);
                
                if (priceElement && changeElement) {
                    const currentPrice = parseFloat(priceElement.textContent.replace('$', '')) || 100;
                    const change = (Math.random() - 0.5) * 10;
                    const newPrice = Math.max(1, currentPrice + change);
                    const changePercent = ((change / currentPrice) * 100).toFixed(2);
                    
                    priceElement.textContent = `$${newPrice.toFixed(2)}`;
                    changeElement.textContent = `${changePercent}%`;
                    changeElement.className = `stock-change ${change >= 0 ? 'positive' : 'negative'}`;
                }
            });
        }

        // 添加通知样式
        const style = document.createElement('style');
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 600;
                z-index: 1000;
                animation: slideIn 0.3s ease;
            }
            
            .notification.success {
                background: linear-gradient(135deg, #27ae60, #2ecc71);
            }
            
            .notification.info {
                background: linear-gradient(135deg, #3498db, #2980b9);
            }
            
            .notification.error {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            .status-indicator {
                display: inline-block;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                margin-left: 8px;
            }
            
            .status-indicator.online {
                background: #27ae60;
            }
            
            .status-indicator.offline {
                background: #95a5a6;
            }
            
            .user-info {
                display: flex;
                align-items: center;
                margin-right: 15px;
                font-weight: 600;
            }
        `;
        document.head.appendChild(style);
    </script>
